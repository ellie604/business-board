    我的前端部署在vercel，后端部署在render,数据库部署在supabase,并且我有两个环境， 
    preview和production，分别对应了两个数据库，可以在我的server/generated文件夹
    下看到生成的两个数据库prisma,我也根据不同的环境配置了.env文件

NODE_ENV=preview npx prisma generate --schema=./prisma/schema.preview.prisma - 生成 Prisma Client
NODE_ENV=preview npx prisma db push --force-reset --schema=./prisma/schema.preview.prisma - 使用预览环境的 schema 重置并更新数据库
NODE_ENV=preview npx ts-node --compilerOptions '{"module":"CommonJS"}' seed.preview.ts - 使用正确的编译选项运行 seed 脚本
首先需要运行 npx prisma generate --schema=./prisma/schema.preview.prisma 来生成 Prisma Client
然后运行 NODE_ENV=preview npx prisma db push --force-reset --schema=./prisma/schema.preview.prisma 来应用 schema 更改
最后运行 NODE_ENV=preview npx ts-node --compilerOptions '{"module":"CommonJS"}' seed.preview.ts 来重新填充数据库



本地运行测试
server目录下：NODE_ENV=development npm run dev 
client目录下：npm run dev

后端api测试：# 测试确认了正确的后端URL是可用的
curl https://business-board.onrender.com/health
# 返回: {"status":"ok","environment":"preview"}

环境检测逻辑：
// 之前依赖环境变量的方式
const env = import.meta.env.MODE;
switch(env) { ... }

测试数据库连接：psql "postgresql://postgres.jklgdzqqwtbwrfgdyhxj:D\$62Vhq7_4KCQqB@aws-0-us-east-2.pooler.supabase.com:5432/postgres"

// 改进后使用域名判断的方式
const hostname = window.location.hostname;
if (hostname.includes('-dev-')) {
  // preview环境
} else if (hostname === 'localhost') {
  // 开发环境
} else {
  // production环境
}

preview环境测试：push到dev分支后自动部署

production环境：dev分支合并到main分支自动部署

都要用原生的import { API_BASE_URL } from '../../config';，不要用axios

生产环境：
前端：https://business-board.vercel.app（部署在 Vercel）
后端：https://business-board-backend.onrender.com（部署在 Render.com）
预览环境：
前端：https://business-board-git-dev-xinyis-projects-6c0795d6.vercel.app（部署在 Vercel）
后端：https://https://business-board.onrender.com（部署在 Render.com 预览环境）
本地开发：
前端：http://localhost:5173
后端：http://localhost:3000


render上preview 环境检测
Build Command：npm install && npx prisma generate --schema=./prisma/schema.preview.prisma && npm run build
注意npx prisma migrate reset --force --skip-seed --schema=./prisma/schema.preview.prisma以及
NODE_ENV=preview npx ts-node --compilerOptions '{"module":"CommonJS"}' seed.preview.ts等指令需要在本地
切换到数据库直接连接URL5432端口执行，其他连接指令在6543端口执行
# Connect to Supabase via connection pooling
DATABASE_URL="postgresql://postgres.jklgdzqqwtbwrfgdyhxj:[YOUR-PASSWORD]@aws-0-us-east-2.pooler.supabase.com:6543/postgres?pgbouncer=true"

# Direct connection to the database. Used for migrations
DIRECT_URL="postgresql://postgres.jklgdzqqwtbwrfgdyhxj:[YOUR-PASSWORD]@aws-0-us-east-2.pooler.supabase.com:5432/postgres"