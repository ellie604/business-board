// server/prisma/schema.production.prisma

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma-production"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("PRO_DATABASE_URL")
  directUrl = env("PRO_DIRECT_URL")
}

enum UserRole {
  BROKER
  AGENT
  SELLER
  BUYER
}

enum ListingStatus {
  ACTIVE
  UNDER_CONTRACT
  CLOSED
}

enum DocumentType {
  // Common documents
  EMAIL_AGENT
  UPLOADED_DOC
  PURCHASE_AGREEMENT
  DUE_DILIGENCE
  PRE_CLOSE_CHECKLIST
  CLOSING_DOCS

  // Buyer documents
  NDA
  FINANCIAL_STATEMENT
  CBR_CIM
  PURCHASE_CONTRACT

  // Seller documents
  LISTING_AGREEMENT
  QUESTIONNAIRE
  AFTER_SALE
  FINANCIAL_DOCUMENTS
}

enum DocumentStatus {
  PENDING
  COMPLETED
}

enum DocumentOperationType {
  UPLOAD
  DOWNLOAD
  BOTH
  NONE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model Document {
  id            String                @id @default(uuid())
  type          DocumentType
  status        DocumentStatus        @default(PENDING)
  url           String?
  fileName      String?
  fileSize      Int?
  operationType DocumentOperationType @default(NONE)
  stepId        Int? // 关联到具体的步骤
  sellerId      String
  seller        User                  @relation("SellerDocuments", fields: [sellerId], references: [id])
  buyerId       String?
  buyer         User?                 @relation("BuyerDocuments", fields: [buyerId], references: [id])
  listingId     String? // 关联到具体的listing
  uploadedAt    DateTime? // 上传时间
  downloadedAt  DateTime? // 下载时间
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  password         String
  name             String           @default("")
  role             UserRole         @default(BUYER)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt
  managedBy        User?            @relation("UserManagement", fields: [managerId], references: [id])
  managerId        String?
  managing         User[]           @relation("UserManagement")
  listings         Listing[]        @relation("SellerListings")
  buyerDocs        Document[]       @relation("BuyerDocuments")
  sellerDocs       Document[]       @relation("SellerDocuments")
  activities       Activity[]
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  unreadCount      Int              @default(0)
  lastReadAt       DateTime?
  buyingListings   Listing[]        @relation("BuyerListings")
  sellerProgress   SellerProgress[]
}

model SellerProgress {
  id                String   @id @default(uuid())
  sellerId          String   @unique
  seller            User     @relation(fields: [sellerId], references: [id])
  currentStep       Int      @default(0)
  completedSteps    Json     @default("[]")
  selectedListingId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Message {
  id        String    @id @default(cuid())
  subject   String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  readAt    DateTime?

  senderId   String
  senderType UserRole
  senderName String

  receiverId   String
  receiverType UserRole
  receiverName String

  status     MessageStatus @default(SENT)
  isRead     Boolean       @default(false)
  isArchived Boolean       @default(false)

  parentMessageId String?
  threadId        String?

  sender        User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver      User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  parentMessage Message?  @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies       Message[] @relation("MessageReplies")

  attachments MessageAttachment[]

  @@index([senderId])
  @@index([receiverId])
  @@index([threadId])
}

model MessageAttachment {
  id         String   @id @default(cuid())
  messageId  String
  fileName   String
  fileSize   Int
  fileType   String
  fileUrl    String
  uploadedAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
}

model Listing {
  id          String        @id @default(uuid())
  title       String
  description String
  price       Float
  status      ListingStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  seller      User          @relation("SellerListings", fields: [sellerId], references: [id])
  sellerId    String
  buyers      User[]        @relation("BuyerListings")
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  type      String
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
