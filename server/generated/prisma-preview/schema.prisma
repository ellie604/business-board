// server/prisma/schema.preview.prisma

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma-preview"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PREVIEW_DATABASE_URL")
}

enum UserRole {
  BROKER
  AGENT
  SELLER
  BUYER
}

enum ListingStatus {
  ACTIVE
  UNDER_CONTRACT
  CLOSED
}

enum DocumentType {
  // Common documents
  EMAIL_AGENT
  UPLOADED_DOC
  PURCHASE_AGREEMENT
  DUE_DILIGENCE
  PRE_CLOSE_CHECKLIST
  CLOSING_DOCS

  // Buyer documents
  NDA
  FINANCIAL_STATEMENT
  CBR_CIM
  PURCHASE_CONTRACT

  // Seller documents
  LISTING_AGREEMENT
  QUESTIONNAIRE
  AFTER_SALE
}

enum DocumentStatus {
  PENDING
  COMPLETED
}

model Document {
  id        String         @id @default(uuid())
  type      DocumentType
  status    DocumentStatus @default(PENDING)
  url       String?
  buyerId   String?
  sellerId  String?
  buyer     User?          @relation("BuyerDocuments", fields: [buyerId], references: [id])
  seller    User?          @relation("SellerDocuments", fields: [sellerId], references: [id])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  name       String     @default("")
  role       UserRole   @default(BUYER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now()) @updatedAt
  managedBy  User?      @relation("UserManagement", fields: [managerId], references: [id])
  managerId  String?
  managing   User[]     @relation("UserManagement")
  listings   Listing[]  @relation("SellerListings")
  buyerDocs  Document[] @relation("BuyerDocuments")
  sellerDocs Document[] @relation("SellerDocuments")
}

model Listing {
  id          String        @id @default(uuid())
  title       String
  description String
  price       Float
  status      ListingStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  sellerId    String
  seller      User          @relation("SellerListings", fields: [sellerId], references: [id])
}
