
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  category: 'category',
  url: 'url',
  fileName: 'fileName',
  fileSize: 'fileSize',
  operationType: 'operationType',
  stepId: 'stepId',
  sellerId: 'sellerId',
  buyerId: 'buyerId',
  listingId: 'listingId',
  uploadedAt: 'uploadedAt',
  downloadedAt: 'downloadedAt',
  uploadedBy: 'uploadedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  managerId: 'managerId',
  unreadCount: 'unreadCount',
  lastReadAt: 'lastReadAt'
};

exports.Prisma.SellerProgressScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  currentStep: 'currentStep',
  completedSteps: 'completedSteps',
  selectedListingId: 'selectedListingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BuyerProgressScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  currentStep: 'currentStep',
  completedSteps: 'completedSteps',
  selectedListingId: 'selectedListingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  subject: 'subject',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  readAt: 'readAt',
  senderId: 'senderId',
  senderType: 'senderType',
  senderName: 'senderName',
  receiverId: 'receiverId',
  receiverType: 'receiverType',
  receiverName: 'receiverName',
  status: 'status',
  isRead: 'isRead',
  isArchived: 'isArchived',
  parentMessageId: 'parentMessageId',
  threadId: 'threadId'
};

exports.Prisma.MessageAttachmentScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  fileName: 'fileName',
  fileSize: 'fileSize',
  fileType: 'fileType',
  fileUrl: 'fileUrl',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.ListingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  price: 'price',
  status: 'status',
  createdAt: 'createdAt',
  sellerId: 'sellerId'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  data: 'data',
  createdAt: 'createdAt'
};

exports.Prisma.SellerQuestionnaireScalarFieldEnum = {
  id: 'id',
  sellerId: 'sellerId',
  data: 'data',
  submitted: 'submitted',
  submittedAt: 'submittedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PreCloseChecklistScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  buyerItems: 'buyerItems',
  sellerItems: 'sellerItems',
  brokerItems: 'brokerItems',
  lastUpdatedBy: 'lastUpdatedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.DocumentType = exports.$Enums.DocumentType = {
  EMAIL_AGENT: 'EMAIL_AGENT',
  UPLOADED_DOC: 'UPLOADED_DOC',
  PURCHASE_AGREEMENT: 'PURCHASE_AGREEMENT',
  DUE_DILIGENCE: 'DUE_DILIGENCE',
  PRE_CLOSE_CHECKLIST: 'PRE_CLOSE_CHECKLIST',
  CLOSING_DOCS: 'CLOSING_DOCS',
  NDA: 'NDA',
  FINANCIAL_STATEMENT: 'FINANCIAL_STATEMENT',
  CBR_CIM: 'CBR_CIM',
  PURCHASE_CONTRACT: 'PURCHASE_CONTRACT',
  LISTING_AGREEMENT: 'LISTING_AGREEMENT',
  QUESTIONNAIRE: 'QUESTIONNAIRE',
  AFTER_SALE: 'AFTER_SALE',
  FINANCIAL_DOCUMENTS: 'FINANCIAL_DOCUMENTS'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED'
};

exports.DocumentCategory = exports.$Enums.DocumentCategory = {
  SELLER_UPLOAD: 'SELLER_UPLOAD',
  AGENT_PROVIDED: 'AGENT_PROVIDED',
  BUYER_UPLOAD: 'BUYER_UPLOAD',
  SYSTEM_GENERATED: 'SYSTEM_GENERATED'
};

exports.DocumentOperationType = exports.$Enums.DocumentOperationType = {
  UPLOAD: 'UPLOAD',
  DOWNLOAD: 'DOWNLOAD',
  BOTH: 'BOTH',
  NONE: 'NONE'
};

exports.UserRole = exports.$Enums.UserRole = {
  BROKER: 'BROKER',
  AGENT: 'AGENT',
  SELLER: 'SELLER',
  BUYER: 'BUYER'
};

exports.MessageStatus = exports.$Enums.MessageStatus = {
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  READ: 'READ'
};

exports.ListingStatus = exports.$Enums.ListingStatus = {
  ACTIVE: 'ACTIVE',
  UNDER_CONTRACT: 'UNDER_CONTRACT',
  CLOSED: 'CLOSED'
};

exports.Prisma.ModelName = {
  Document: 'Document',
  User: 'User',
  SellerProgress: 'SellerProgress',
  BuyerProgress: 'BuyerProgress',
  Message: 'Message',
  MessageAttachment: 'MessageAttachment',
  Listing: 'Listing',
  Activity: 'Activity',
  SellerQuestionnaire: 'SellerQuestionnaire',
  PreCloseChecklist: 'PreCloseChecklist'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
